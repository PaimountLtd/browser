syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.obs_browser_api";
option java_outer_classname = "ObsBrowserProto";
option objc_class_prefix = "HLW";

package obs_browser_api;

service BrowserServer {
  rpc RegisterPID (RegisterPIDRequest) returns (NoReply) {};
  rpc IntializeBrowserCEF (Request) returns (NoReply) {};
  rpc CreateBrowserSource (CreateRequest) returns (NoReply) {};
  rpc SetShowing (SetShowingRequest) returns (NoReply) {};
  rpc SetActive (SetActiveRequest) returns (NoReply) {};
  rpc Refresh (IdRequest) returns (NoReply) {};
  rpc SignalBeginFrame (IdRequest) returns (SignalBeginFrameReply) {};
  rpc DestroyBrowserSource (DestroyBrowserSourceRequest) returns (NoReply) {};
  rpc ShutdownBrowserCEF (NoArgs) returns (NoReply) {};
  rpc SendMouseClick (MouseEventRequest) returns (NoReply) {};
  rpc SendMouseMove (MouseEventRequest) returns (NoReply) {};
  rpc SendMouseWheel (MouseEventRequest) returns (NoReply) {};
  rpc SendFocus (MouseEventRequest) returns (NoReply) {};
  rpc SendKeyClick (MouseEventRequest) returns (NoReply) {};
  rpc OnAudioStreamStarted (IdRequest) returns (OnAudioStreamStartedReply);
  rpc OnAudioStreamPacket (OnAudioStreamPacketRequest) returns (OnAudioStreamPacketReply);
  rpc OnAudioStreamStopped (IdRequest) returns (OnAudioStreamStoppedReply);
  rpc RequestPaint (IdRequest) returns (RequestPaintReply);
}

message RegisterPIDRequest {
  uint32 PID = 1;
}

message Request {
  uint32 obs_version = 1;
  string obs_locale = 2;
  string obs_conf_path = 3;
  string obs_browser_subprocess_path = 4;
  bool hwaccel = 5;
}

message CreateRequest {
  uint64 id = 1;
  bool hwaccel = 2;
  bool reroute_audio = 3;
  int32 width = 4;
  int32 height = 5;
  int32 fps = 6;
  bool fps_custom = 7;
  int32 video_fps = 8;
  string url = 9;
  string css = 10;
}

message SetShowingRequest {
  uint64 id = 1;
  bool showing = 2;
}

message SetActiveRequest {
  uint64 id = 1;
  bool active = 2;
}

message IdRequest {
  uint64 id = 1;
}

message NoArgs {

}

message NoReply {

}

message SignalBeginFrameReply {
  int64 shared_handle = 1;
}

message DestroyBrowserSourceRequest {
  uint64 id = 1;
  bool async = 2;
}

message MouseEventRequest {
  uint64 id = 1;
  uint32 modifiers = 2;
  int32 x = 3;
  int32 y = 4;
  int32 type = 5;
  bool mouse_up = 6;
  uint32 click_count = 7;
  bool mouse_leave = 8;
  int32 x_delta = 9;
  int32 y_delta = 10;
  bool focus = 11;
  uint32 native_vkey = 12;
  uint32 native_scancode = 13;
  string text = 14;
  bool key_up = 15;
}

message OnAudioStreamStartedReply {
  int32 id = 1;
  int32 channel_layout = 2;
  int32 sample_rate = 3;
}

message OnAudioStreamPacketRequest {
  uint64 id = 1;
  int32 channels = 2;
}

message OnAudioStreamPacketReply {
  repeated bytes data = 1;
  int32 frames = 2;
  int64 pts = 3;
}

message OnAudioStreamStoppedReply {
  int32 id = 1;
}

message RequestPaintReply {
  int32 width = 1;
  int32 height = 2;
  repeated bytes data = 3;
}